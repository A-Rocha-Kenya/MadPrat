limits = c(0,365))
View(dr)
View(dl)
a=dl %>% filter(CommonName==specie_name ) %>% select(weight)
a=dl %>% filter(CommonName==specie_name ) %>% select(Weight)
a
mean(a)
a
a %>% hist()
hist(a)
a %>% gggplot()+hist()
a %>% ggplot()+hist()
a %>% ggplot()+hist( aex(x=1))
a %>% ggplot()+hist( aex(x=a))
a %>% ggplot()+hist( aes(x=a))
a %>% ggplot()+geom_histogram( aes(x=a))
a %>% ggplot( aes(x=a))+geom_histogram()
a %>% ggplot( aes(x=a$Weight))+geom_histogram()
dl
specie_name
mean(a$Weight)
mean(a$Weight,na.rm = FALSE)
mean(a$Weight,na.rm = TRUE)
std(a$Weight,na.rm = TRUE)
var(a$Weight,na.rm = TRUE)
shiny::runApp('GitHub/rabm/Shiny')
# Load library
library(RODBC)
library(ggplot2)
library(tidyverse)
library(gam)
library(gridExtra)
library(RColorBrewer)
# Define path to access database file
access_db = 'C:/Users/rnussba1/Desktop/Ringing/Ringing/Data/0_ARK Ringing DB_2019-09-01.accdb'
# Create the connection
mdbConnect<-odbcConnectAccess2007(access_db)
# Visualize the table content
# sqlTables(mdbConnect)
# Import Tables
SPE <- sqlFetch(mdbConnect, "Species2")
SES <- sqlFetch(mdbConnect, "Sessions")
LOC <- sqlFetch(mdbConnect, "Localities")
CAP <- sqlFetch(mdbConnect, "Captures")
# Combine datasets
d <- CAP %>%
left_join(SES, by = 'SessionID') %>%
left_join(LOC, by = 'LocalityID') %>%
left_join(SPE, by = c('SpeciesID' = 'Species#')) %>%
mutate(Julian = as.numeric(format(Date,'%j')), Year = as.numeric(format(Date,'%Y')), Month = as.numeric(format(Date,'%m')))
d %>% group_by(SpeciesID)
d %>% group_by(SpeciesID) %>% mutate(count=n()) %>% sselect(CommonName,count)
d %>% group_by(SpeciesID) %>% mutate(count=n()) %>% select(CommonName,count)
d %>% group_by(SpeciesID) %>% mutate(count=n()) %>% select(CommonName,count) %>% unique()
d %>% group_by(SpeciesID) %>% mutate(count=n()) %>% select(CommonName,count) %>% unique() %>% arrange(count())
d %>% group_by(SpeciesID) %>% mutate(count=n()) %>% select(CommonName,count) %>% unique() %>% arrange(count
)
SP_count = d %>% group_by(SpeciesID) %>% mutate(count=n()) %>% select(CommonName,count) %>% unique() %>% arrange(count)
glimpse(SP_count)
View(SP_count)
SP_count = d %>% group_by(SpeciesID) %>% mutate(count=n()) %>% select(CommonName,count) %>% unique() %>% arrange(desc(count))
##################################
## RED_CAPPED ROBIN CHAT
specie_name = 'Red-capped Robin Chat' #Mangrove Kingfisher Red-capped Robin Chat
# Filter for Watamu
locality = 17
dl <- d %>%
filter(LocalityID==locality) %>%
# mutate(lengthNet = Nets6m + Nets9m + Nets12m + Nets18m) %>%
mutate(Julian = as.numeric(format(Date,'%j')), Year = as.numeric(format(Date,'%Y')))
# Caputure per year
dl %>% filter(CommonName==specie_name) %>%
select(RingNo, Year) %>% unique %>%
group_by(Year) %>% mutate(ny = n()) %>%
ggplot() +
geom_point(aes( x=Year , y=ny ))
# Get Session data (Absence Data)
ds <- dl %>%
group_by(SessionID) %>%
mutate(Count = sum(CommonName==specie_name, na.rm = TRUE)) %>%
mutate(Count0 = sum(CommonName==specie_name & Age == 0, na.rm = TRUE)) %>%
mutate(CountAd = sum(CommonName==specie_name & Age != 0 & Age==4, na.rm = TRUE)) %>%
mutate(CountJuv = sum(CommonName==specie_name & Age != 0 & Age!=4, na.rm = TRUE)) %>%
select(SessionID, Date, Julian, Count, Year, CountAd, CountJuv, Count0) %>%
unique()
# Phenology
ggplot(ds) +
geom_point( aes( x=Julian , y=Count ) ) +
geom_smooth(aes( x=Julian , y=Count ), method = "gam", formula = y ~ s(x), method.args = list(family = "poisson"), ) +
ylim(0,max(ds$Count)) +
scale_x_continuous(breaks=as.numeric(format(ISOdate(2004,1:12,1),"%j")),
labels=format(ISOdate(2004,1:12,1),"%B"))
var(a$Weight,na.rm = TRUE)
a
# Weight
dw <- dl %>%
filter(CommonName==specie_name ) %>% select(Weight)
dw
# Weight
dw <- dl %>%
filter(CommonName==specie_name ) %>% select(Weight) %>%
ggplot() %>%
geom_histogram(aes(x=Weight))
# Weight
dw <- dl %>%
filter(CommonName==specie_name ) %>% select(Weight) %>%
ggplot() +
geom_histogram(aes(x=Weight))
# Weight
dw <- dl %>%
filter(CommonName==specie_name ) %>% select(Weight) %>%
ggplot() +
geom_histogram(aes(x=Weight))
# Weight
dl %>%
filter(CommonName==specie_name ) %>% select(Weight) %>%
ggplot() +
geom_histogram(aes(x=Weight))
# Weight
dl %>%
filter(CommonName==specie_name ) %>% select(Weight) %>%
ggplot() +
geom_histogram(aes(x=Weight), binwidth = 1)
# Weight
dl %>%
filter(CommonName==specie_name ) %>%
ggplot() +
geom_histogram(aes(x=Weight), binwidth = 1)+
geom_vline(xintercept = which.min(abs(sort(Weight,decreasing=TRUE) - quantile(Weight,0.7))))
# Weight
dl %>%
filter(CommonName==specie_name ) %>%
ggplot() +
geom_histogram(aes(x=Weight), binwidth = 1)+
geom_vline(xintercept = which.min(abs(sort(Weight,decreasing=TRUE) - quantile(Weight,0.7))))
dl %>%
filter(CommonName==specie_name ) %>%
ggplot() +
geom_histogram(aes(x=Weight), binwidth = 1)
ggplot(dw) +
geom_histogram(aes(x=Weight), binwidth = 1)+
geom_vline(xintercept = which.min(abs(sort(dw$Weight,decreasing=TRUE) - quantile(dw$Weight,0.7))))
dw <- dl %>% filter(CommonName==specie_name )
dw
ggplot(dw) +
geom_histogram(aes(x=Weight), binwidth = 1)+
geom_vline(xintercept = which.min(abs(sort(dw$Weight,decreasing=TRUE) - quantile(dw$Weight,0.7))))
sort(dw$Weight,decreasing=TRUE)
quantile(dw$Weight,0.7)
ggplot(dw) +
geom_histogram(aes(x=Weight), binwidth = 1)+
geom_vline(xintercept = which.min(abs(sort(dw$Weight,decreasing=TRUE) - quantile(dw$Weight,0.7, na.rm = FALSE))))
ggplot(dw) +
geom_histogram(aes(x=Weight), binwidth = 1)+
geom_vline(xintercept = which.min(abs(sort(dw$Weight,decreasing=TRUE) - quantile(dw$Weight,0.7, na.rm = TRUE))))
quantile(dw$Weight,0.7, na.rm = TRUE))
quantile(dw$Weight,0.7, na.rm = TRUE)
which.min(abs(sort(dw$Weight,decreasing=TRUE) - quantile(dw$Weight,0.7, na.rm = TRUE)))
sort(dw$Weight,decreasing=TRUE)
quantile(dw$Weight,0.7, na.rm = TRUE)
quantile(dw$Weight,0.9, na.rm = TRUE))
quantile(dw$Weight,0.9, na.rm = TRUE)
ggplot(dw) +
geom_histogram(aes(x=Weight), binwidth = 1)+
geom_vline(xintercept = quantile(dw$Weight,0.9, na.rm = TRUE))
ggplot(dw) +
geom_histogram(aes(x=Weight), binwidth = 1)+
geom_vline(xintercept = quantile(dw$Weight,0.1, na.rm = TRUE)) +
geom_vline(xintercept = quantile(dw$Weight,0.9, na.rm = TRUE))
ggplot(dw) +
geom_histogram(aes(x=Weight), binwidth = 1)+
geom_vline(xintercept = quantile(dw$Weight,0.05, na.rm = TRUE)) +
geom_vline(xintercept = quantile(dw$Weight,0.95, na.rm = TRUE))
quantile(dw$Weight,0.05, na.rm = TRUE)
quantile(dw$Weight,0.95, na.rm = TRUE)
# Define the specie of interest
specie_name = 'Mangrove Kingfisher' #Mangrove Kingfisher Red-capped Robin Chat
# Filter for Watamu
locality = 17
# Weight
dw <- dl %>% filter(CommonName==specie_name )
ggplot(dw) +
geom_histogram(aes(x=Weight), binwidth = 1)+
geom_vline(xintercept = quantile(dw$Weight,0.05, na.rm = TRUE)) +
geom_vline(xintercept = quantile(dw$Weight,0.95, na.rm = TRUE))
mean(dw$Weight, na.rm = TRUE)
quantile(dw$Weight,0.05, na.rm = TRUE)
quantile(dw$Weight,0.95, na.rm = TRUE)
species_list <- read_csv('C:/Users/rnussba1/Documents/GitHub/rabm/Shiny/species_list.csv')
library(shiny)
library(dplyr)
library(readr)
library(leaflet)
library(leaflet.extras)
library(rabm)
species_list <- read_csv('C:/Users/rnussba1/Documents/GitHub/rabm/Shiny/species_list.csv')
View(species_list)
library(shiny)
library(dplyr)
library(readr)
library(leaflet)
library(leaflet.extras)
library(rabm)
source("C:/Users/rnussba1/Documents/GitHub/rabm/r/pull_single_specie.R")
source("C:/Users/rnussba1/Documents/GitHub/rabm/r/find_pentad_coordinates.R")
source("C:/Users/rnussba1/Documents/GitHub/rabm/r/find_pentad.R")
source("C:/Users/rnussba1/Documents/GitHub/rabm/r/find_pentad_within.R")
source("C:/Users/rnussba1/Documents/GitHub/rabm/r/extract_species.R")
species_list <- read_csv('C:/Users/rnussba1/Documents/GitHub/rabm/Shiny/species_list.csv')
ui <- fluidPage(
leafletOutput("leafmap"),
#selectInput("country", "Choose Country:",),
selectInput("specie", "Choose Specie:",
setNames(as.character(species_list$Spp), species_list$name)
),
p(),
actionButton("recalc", "New points")
)
server <- function(input, output, session) {
output$leafmap <- renderLeaflet({
map = leaflet() %>% addTiles() %>% addDrawToolbar(
targetGroup = "draw",
polylineOptions = FALSE,
markerOptions = FALSE,
circleMarkerOptions = FALSE,
circleOptions = FALSE,
editOptions = editToolbarOptions(),
singleFeature=TRUE)
})
points <- observeEvent(input$recalc, {
# req(input$leafmap_draw_stop)
if (!is.null(input$leafmap_draw_new_feature$geometry$coordinates)){
coordinates <- do.call(rbind,
lapply(
input$leafmap_draw_new_feature$geometry$coordinates[[1]],
function(x){
c(x[[1]][1],x[[2]][1])
}
)
)
coordinates <- data.frame(lat = coordinates[,1], lon = coordinates[,2])
pentads <- find_pentad_within(type = "coordinates",
coordinates = coordinates)
print(pentads)
extract_species(
species_ids = input$specie,
start_date = '2019-01-01',
end_date = '2019-02-01',
region_type = 'pentad',
region_ids = pentads,
return_type = 'data',
)
}
}, ignoreNULL = FALSE)
}
shinyApp(ui, server)
runApp('GitHub/rabm/Shiny')
runApp()
runApp('GitHub/rabm/Shiny')
file.edit(extract_species)
file.edit("C:/Users/rnussba1/Documents/GitHub/rabm/r/extract_species.R")
pentads <- c("3780b0140", "3780b0120", "3780b0100", "3780b0080")
input$specie <- 453
specie <- 453
extract_species(
species_ids = specie,
start_date = '2019-01-01',
end_date = '2019-02-01',
region_type = 'pentad',
region_ids = pentads,
return_type = 'data',
)
extract_species()
extract_species(specie)
shiny::runApp('GitHub/rabm/Shiny')
edit.file('C:/Users/rnussba1/Documents/GitHub/rabm/r/extract_species.R')
file.edit('C:/Users/rnussba1/Documents/GitHub/rabm/r/extract_species.R')
extract_species(12)
source("C:/Users/rnussba1/Documents/GitHub/rabm/r/pull_single_specie_location.R")
source("C:/Users/rnussba1/Documents/GitHub/rabm/r/pull_single_specie_location.R")
extract_species(12)
extract_species(
species_ids = input$specie,
start_date = '2019-01-01',
end_date = '2019-02-01',
region_type = 'pentad',
region_ids = '3620c0020',
return_type = 'data',
)
extract_species
species_ids = input$specie,
start_date = '2019-01-01',
end_date = '2019-02-01',
region_type = 'pentad',
region_ids = '3620c0020',
return_type = 'data'
species_ids = '12',
start_date = '2019-01-01',
end_date = '2019-02-01',
region_type = 'pentad',
region_ids = '3620c0020',
return_type = 'data'
species_ids = '12'
start_date = '2019-01-01'
end_date = '2019-02-01'
region_type = 'pentad'
region_ids = '3620c0020'
return_type = 'data'
# Check arguments
Check <- ArgumentCheck::newArgCheck()
if (is.na(as.Date(start_date, format = "%Y-%m-%d"))) {
ArgumentCheck::addError(msg = "'start_date' is incorrectly specified. Please use the YYYY-MM-DD format",
argcheck = Check)
}
if (is.na(as.Date(end_date, format = "%Y-%m-%d"))) {
ArgumentCheck::addError(msg = "'end_date' is incorrectly specified. Please use the YYYY-MM-DD format",
argcheck = Check)
}
if (!is.character(region_type) ||
!region_type %in% c('country', 'province', 'pentad', 'group', 'qdgc')) {
ArgumentCheck::addError(msg = "'region_type' is incorrectly specified. Please use one of the following: 'country', 'province', 'pentad', 'group', 'qdgc'",
argcheck = Check)
}
if (!is.character(return_type) ||
!return_type %in% c('data', 'count')) {
ArgumentCheck::addError(msg = "'end_date' is incorrectly specified. Please use 'data' or 'count'",
argcheck = Check)
}
ArgumentCheck::finishArgCheck(Check)
a <- purrr::map_df(species_ids, function(species_id) {
purrr::map_df(region_ids, function(region_id) {
pull_single_specie_location(species_id,
start_date,
end_date,
region_type,
region_id,
return_type)
})
})
extract_species(
species_ids = '12',
start_date = '2019-01-01',
end_date = '2019-02-01',
region_type = 'pentad',
region_ids = '3620c0020',
return_type = 'data',
)
extract_species(
species_ids = '12',
start_date = '2019-01-01',
end_date = '2019-02-01',
region_type = 'pentad',
region_ids = '3620c0020',
)
extract_species(
species_ids = '12',
start_date = '2019-01-01',
end_date = '2019-02-01',
region_type = 'pentad',
region_ids = '3620c0020'
)
runApp('GitHub/rabm/Shiny')
list
Q
runApp('GitHub/rabm/Shiny')
library(httr)
library(jsonlite)
library(readr)
library(readxl)
library(dplyr)
library(ggplot2)
library(leaflet)
setwd('C:/Users/rnussba1/OneDrive/ARK/ARK - Science/Madagascar_pratincole_publication')
d <- read_excel('./data.xlsx', sheet = "data")
df = d %>%
filter(is.na(validity)) %>%
mutate(number = as.numeric(number)) %>%
mutate(julian = as.numeric(format(date,'%j'))) %>%
mutate(year = as.numeric(format(date,'%Y')))
df %>%
ggplot(aes(x = julian, y = number, col = country)) +
geom_point() +
geom_smooth(method = "gam", formula = y ~ s(x)) +
scale_x_continuous(breaks=cumsum(c(1,31,28,31,30,31,30,31,31,30,31,30)), labels =c("Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec") )
df %>%
filter(location="Sabaki") %>%
#filter(number>0) %>%
#filter(source == "Britton (1977)" | source == "Water Bird Count" | source == "eBird") %>%
#mutate(source = if_else(grepl("East African Bird Report",source),"East African Bird Report",source)) %>%
#filter(source %in% c("Water Bird Count","East African Bird Report","Britton (1977)")) %>%
mutate(period = if_else(year <2000, '<2000','>2000')) %>%
ggplot(aes(x= julian, y= number, col = period)) +
geom_point() +
geom_smooth(method = "gam", formula = y ~ s(x)) +
scale_x_continuous(breaks=cumsum(c(1,31,28,31,30,31,30,31,31,30,31,30)),
labels =c("Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec") ) +
ylim(-10,3600)
df %>%
filter(location=="Sabaki") %>%
#filter(number>0) %>%
#filter(source == "Britton (1977)" | source == "Water Bird Count" | source == "eBird") %>%
#mutate(source = if_else(grepl("East African Bird Report",source),"East African Bird Report",source)) %>%
#filter(source %in% c("Water Bird Count","East African Bird Report","Britton (1977)")) %>%
mutate(period = if_else(year <2000, '<2000','>2000')) %>%
ggplot(aes(x= julian, y= number, col = period)) +
geom_point() +
geom_smooth(method = "gam", formula = y ~ s(x)) +
scale_x_continuous(breaks=cumsum(c(1,31,28,31,30,31,30,31,31,30,31,30)),
labels =c("Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec") ) +
ylim(-10,3600)
df %>%
filter(location=="Sabaki") %>%
#filter(number>0) %>%
#filter(source == "Britton (1977)" | source == "Water Bird Count" | source == "eBird") %>%
#mutate(source = if_else(grepl("East African Bird Report",source),"East African Bird Report",source)) %>%
#filter(source %in% c("Water Bird Count","East African Bird Report","Britton (1977)")) %>%
mutate(period = if_else(year <2000, '<2000','>2000')) %>%
ggplot(aes(x= julian, y= number, col = period)) +
geom_point() +
geom_smooth(method = "gam", formula = y ~ s(x)) +
scale_x_continuous(breaks=cumsum(c(1,31,28,31,30,31,30,31,31,30,31,30)),
labels =c("Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec") ) +
ylim(-10,3600)
df %>%
filter(location=="Sabaki")
df
df %>%
filter(location=="Sabaki")
d <- read_excel('./data.xlsx', sheet = "data")
# Filter
df = d %>%
filter(is.na(validity)) %>%
mutate(number = as.numeric(number)) %>%
mutate(julian = as.numeric(format(date,'%j'))) %>%
mutate(year = as.numeric(format(date,'%Y')))
df %>%
filter(location=="Sabaki") %>%
#filter(number>0) %>%
#filter(source == "Britton (1977)" | source == "Water Bird Count" | source == "eBird") %>%
#mutate(source = if_else(grepl("East African Bird Report",source),"East African Bird Report",source)) %>%
#filter(source %in% c("Water Bird Count","East African Bird Report","Britton (1977)")) %>%
mutate(period = if_else(year <2000, '<2000','>2000')) %>%
ggplot(aes(x= julian, y= number, col = period)) +
geom_point() +
geom_smooth(method = "gam", formula = y ~ s(x)) +
scale_x_continuous(breaks=cumsum(c(1,31,28,31,30,31,30,31,31,30,31,30)),
labels =c("Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec") ) +
ylim(-10,3600)
library(dplyr)
df %>%
filter(location=="Sabaki") %>%
#filter(number>0) %>%
#filter(source == "Britton (1977)" | source == "Water Bird Count" | source == "eBird") %>%
#mutate(source = if_else(grepl("East African Bird Report",source),"East African Bird Report",source)) %>%
#filter(source %in% c("Water Bird Count","East African Bird Report","Britton (1977)")) %>%
mutate(period = if_else(year <2000, '<2000','>2000')) %>%
ggplot(aes(x= julian, y= number, col = period)) +
geom_point() +
geom_smooth(method = "gam", formula = y ~ s(x)) +
scale_x_continuous(breaks=cumsum(c(1,31,28,31,30,31,30,31,31,30,31,30)),
labels =c("Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec") ) +
ylim(-10,3600)
library(tidyverse)
df %>%
filter(location=="Sabaki") %>%
#filter(number>0) %>%
#filter(source == "Britton (1977)" | source == "Water Bird Count" | source == "eBird") %>%
#mutate(source = if_else(grepl("East African Bird Report",source),"East African Bird Report",source)) %>%
#filter(source %in% c("Water Bird Count","East African Bird Report","Britton (1977)")) %>%
mutate(period = if_else(year <2000, '<2000','>2000')) %>%
ggplot(aes(x= julian, y= number, col = period)) +
geom_point() +
geom_smooth(method = "gam", formula = y ~ s(x)) +
scale_x_continuous(breaks=cumsum(c(1,31,28,31,30,31,30,31,31,30,31,30)),
labels =c("Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec") ) +
ylim(-10,3600)
library(readxl)
library(tidyverse)
library(ggplot2)
library(leaflet)
setwd('C:/Users/rnussba1/OneDrive/ARK/ARK - Science/Madagascar_pratincole_publication')
d <- read_excel('./data.xlsx', sheet = "data")
# Filter
df = d %>%
filter(is.na(validity)) %>%
mutate(number = as.numeric(number)) %>%
mutate(julian = as.numeric(format(date,'%j'))) %>%
mutate(year = as.numeric(format(date,'%Y')))
df %>%
ggplot(aes(x = julian, y = number, col = country)) +
geom_point() +
geom_smooth(method = "gam", formula = y ~ s(x)) +
scale_x_continuous(breaks=cumsum(c(1,31,28,31,30,31,30,31,31,30,31,30)), labels =c("Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec") )
df %>%
filter(location=="Sabaki") %>%
#filter(number>0) %>%
#filter(source == "Britton (1977)" | source == "Water Bird Count" | source == "eBird") %>%
#mutate(source = if_else(grepl("East African Bird Report",source),"East African Bird Report",source)) %>%
#filter(source %in% c("Water Bird Count","East African Bird Report","Britton (1977)")) %>%
mutate(period = if_else(year <2000, '<2000','>2000')) %>%
ggplot(aes(x= julian, y= number, col = period)) +
geom_point() +
geom_smooth(method = "gam", formula = y ~ s(x)) +
scale_x_continuous(breaks=cumsum(c(1,31,28,31,30,31,30,31,31,30,31,30)),
labels =c("Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec") ) +
ylim(-10,3600)
install.packages(c("auk", "backports", "broom", "callr", "camtrapR", "classInt", "countrycode", "covr", "crosstalk", "dbplyr", "devtools", "dplyr", "DT", "foreach", "fs", "geojsonio", "geojsonsf", "ggplot2", "git2r", "glue", "gtools", "httpcode", "jsonify", "lhs", "lifecycle", "lme4", "lubridate", "lwgeom", "modelr", "nloptr", "pillar", "pkgbuild", "plotrix", "pscl", "purrr", "R2OpenBUGS", "raster", "Rcpp", "RcppArmadillo", "RCurl", "reshape2", "rex", "rlang", "roxygen2", "sf", "shiny", "sp", "spData", "tibble", "tinytex", "tmap", "tmaptools", "units", "unmarked", "usethis", "V8", "vctrs", "withr", "xfun", "xml2"))
install.packages(c("auk", "backports", "broom", "callr", "camtrapR", "classInt", "countrycode", "covr", "crosstalk", "dbplyr", "devtools", "dplyr", "DT", "foreach", "fs", "geojsonio", "geojsonsf", "ggplot2", "git2r", "glue", "gtools", "httpcode", "jsonify", "lhs", "lifecycle", "lme4", "lubridate", "lwgeom", "modelr", "nloptr", "pillar", "pkgbuild", "plotrix", "pscl", "purrr", "R2OpenBUGS", "raster", "Rcpp", "RcppArmadillo", "RCurl", "reshape2", "rex", "rlang", "roxygen2", "sf", "shiny", "sp", "spData", "tibble", "tinytex", "tmap", "tmaptools", "units", "unmarked", "usethis", "V8", "vctrs", "withr", "xfun", "xml2"))
install.packages(c("auk", "backports", "broom", "callr", "camtrapR", "classInt", "countrycode", "covr", "crosstalk", "dbplyr", "devtools", "dplyr", "DT", "foreach", "fs", "geojsonio", "geojsonsf", "ggplot2", "git2r", "glue", "gtools", "httpcode", "jsonify", "lhs", "lifecycle", "lme4", "lubridate", "lwgeom", "modelr", "nloptr", "pillar", "pkgbuild", "plotrix", "pscl", "purrr", "R2OpenBUGS", "raster", "Rcpp", "RcppArmadillo", "RCurl", "reshape2", "rex", "rlang", "roxygen2", "sf", "shiny", "sp", "spData", "tibble", "tinytex", "tmap", "tmaptools", "units", "unmarked", "usethis", "V8", "vctrs", "withr", "xfun", "xml2"))
install.packages(c("auk", "backports", "broom", "callr", "camtrapR", "classInt", "countrycode", "covr", "crosstalk", "dbplyr", "devtools", "dplyr", "DT", "foreach", "fs", "geojsonio", "geojsonsf", "ggplot2", "git2r", "glue", "gtools", "httpcode", "jsonify", "lhs", "lifecycle", "lme4", "lubridate", "lwgeom", "modelr", "nloptr", "pillar", "pkgbuild", "plotrix", "pscl", "purrr", "R2OpenBUGS", "raster", "Rcpp", "RcppArmadillo", "RCurl", "reshape2", "rex", "rlang", "roxygen2", "sf", "shiny", "sp", "spData", "tibble", "tinytex", "tmap", "tmaptools", "units", "unmarked", "usethis", "V8", "vctrs", "withr", "xfun", "xml2"))
install.packages(c("auk", "backports", "broom", "callr", "camtrapR", "classInt", "countrycode", "covr", "crosstalk", "dbplyr", "devtools", "dplyr", "DT", "foreach", "fs", "geojsonio", "geojsonsf", "ggplot2", "git2r", "glue", "gtools", "httpcode", "jsonify", "lhs", "lifecycle", "lme4", "lubridate", "lwgeom", "modelr", "nloptr", "pillar", "pkgbuild", "plotrix", "pscl", "purrr", "R2OpenBUGS", "raster", "Rcpp", "RcppArmadillo", "RCurl", "reshape2", "rex", "rlang", "roxygen2", "sf", "shiny", "sp", "spData", "tibble", "tinytex", "tmap", "tmaptools", "units", "unmarked", "usethis", "V8", "vctrs", "withr", "xfun", "xml2"))
install.packages(c("auk", "backports", "broom", "callr", "camtrapR", "classInt", "countrycode", "covr", "crosstalk", "dbplyr", "devtools", "dplyr", "DT", "foreach", "fs", "geojsonio", "geojsonsf", "ggplot2", "git2r", "glue", "gtools", "httpcode", "jsonify", "lhs", "lifecycle", "lme4", "lubridate", "lwgeom", "modelr", "nloptr", "pillar", "pkgbuild", "plotrix", "pscl", "purrr", "R2OpenBUGS", "raster", "Rcpp", "RcppArmadillo", "RCurl", "reshape2", "rex", "rlang", "roxygen2", "sf", "shiny", "sp", "spData", "tibble", "tinytex", "tmap", "tmaptools", "units", "unmarked", "usethis", "V8", "vctrs", "withr", "xfun", "xml2"))
